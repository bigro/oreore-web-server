package webserver;

import servletimpl.ServletInfo;
import servletimpl.ServletService;
import util.SendResponse;
import util.Util;

import java.io.*;
import java.net.Socket;
import java.net.URLDecoder;
import java.nio.file.Files;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class ServerThread implements Runnable {

    private static final String DOCUMENT_ROOT = "server/src/main/resources/web";
    private static final String ERROR_DOCUMENT = "server/src/main/resources";
    private static final String SERVER_NAME = "localhost:8001";

    private Socket socket;

    public ServerThread(Socket socket) {
        this.socket = socket;
    }

    @Override
    public void run() {
        OutputStream output = null;
        try {

            String line;
            String requestLine = null;
            String method = null;
            Map<String, String> requestHeader = new HashMap<>();
            InputStream input = socket.getInputStream();
            while ((line = Util.readLine(input)) != null) {
                if (line.isEmpty()) break;
                if (line.startsWith("GET")) {
                    method = "GET";
                    requestLine = line;
                } else if (line.startsWith("POST")) {
                    method = "POST";
                    requestLine = line;
                } else {
                    addRequestHeader(requestHeader, line);
                }
            }

            if (requestLine == null) {
                return;
            }

            String reqUri = URLDecoder.decode(requestLine.split(" ")[1], "UTF-8");
            String[] pathAndQuery = reqUri.split("\\?");
            String path = pathAndQuery[0];
            String query = null;
            if (pathAndQuery.length > 1) {
                query = pathAndQuery[1];
            }

            output = new BufferedOutputStream(socket.getOutputStream());

            ServletInfo servletInfo = ServletInfo.searchServlet(path);
            if (servletInfo != null) {
                ServletService.doService(method, query, servletInfo,
                        requestHeader, input, output);
                return;
            }

            String[] tmp = reqUri.split("\\.");
            String ext = tmp[tmp.length - 1];

            if (path.endsWith("/")) {
                path += "index.html";
                ext = "html";
            }

            Path pathObj = Paths.get(DOCUMENT_ROOT + path);
            Path realPath;
            try {
                realPath = pathObj.toRealPath();
            } catch (NoSuchFileException ex) {
                SendResponse.sendNotFoundResponse(output, ERROR_DOCUMENT);
                return;
            }
            if (!realPath.startsWith(Paths.get(DOCUMENT_ROOT).toRealPath().toString())) {
                SendResponse.sendNotFoundResponse(output, ERROR_DOCUMENT);
                return;
            } else if (Files.isDirectory(realPath)) {
                String host = requestHeader.get("HOST");
                String location = "http://"
                        + ((host != null) ? host : SERVER_NAME)
                        + path + "/";
                SendResponse.sendMovePermanentlyResponse(output, location);
                return;
            }

            try (InputStream inputStream = new BufferedInputStream(Files.newInputStream(realPath))) {
                SendResponse.sendOkResponse(output, inputStream, ext);
            } catch (FileNotFoundException ex) {
                SendResponse.sendNotFoundResponse(output, ERROR_DOCUMENT);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (output != null) {
                    output.close();
                }
                socket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private static void addRequestHeader(Map<String, String> requestHeader, String line) {
        int colonPos = line.indexOf(':');
        if (colonPos == -1)
            return;

        String headerName = line.substring(0, colonPos).toUpperCase();
        String headerValue = line.substring(colonPos + 1).trim();
        requestHeader.put(headerName, headerValue);
    }

}
